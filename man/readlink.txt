
STAT(1)                   BSD General Commands Manual                  STAT(1)

NNAAMMEE
     rreeaaddlliinnkk, ssttaatt -- display file status

SSYYNNOOPPSSIISS
     ssttaatt [--FFLLnnqq] [--ff _f_o_r_m_a_t | --ll | --rr | --ss | --xx] [--tt _t_i_m_e_f_m_t] [_f_i_l_e _._._.]
     rreeaaddlliinnkk [--nn] [_f_i_l_e _._._.]

DDEESSCCRRIIPPTTIIOONN
     The ssttaatt utility displays information about the file pointed to by _f_i_l_e.
     Read, write or execute permissions of the named file are not required,
     but all directories listed in the path name leading to the file must be
     searchable.  If no argument is given, ssttaatt displays information about the
     file descriptor for standard input.

     When invoked as rreeaaddlliinnkk, only the target of the symbolic link is
     printed.  If the given argument is not a symbolic link, rreeaaddlliinnkk will
     print nothing and exit with an error.

     The information displayed is obtained by calling lstat(2) with the given
     argument and evaluating the returned structure.

     The options are as follows:

     --FF      As in ls(1), display a slash (`/') immediately after each path-
             name that is a directory, an asterisk (`*') after each that is
             executable, an at sign (`@') after each symbolic link, a percent
             sign (`%') after each whiteout, an equal sign (`=') after each
             socket, and a vertical bar (`|') after each that is a FIFO.  The
             use of --FF implies --ll.

     --ff _f_o_r_m_a_t
             Display information using the specified format.  See the _F_O_R_M_A_T_S
             section for a description of valid formats.

     --LL      Use stat(2) instead of lstat(2).  The information reported by
             ssttaatt will refer to the target of _f_i_l_e, if file is a symbolic
             link, and not to _f_i_l_e itself.

     --ll      Display output in llss --llTT format.

     --nn      Do not force a newline to appear at the end of each piece of out-
             put.

     --qq      Suppress failure messages if calls to stat(2) or lstat(2) fail.
             When run as rreeaaddlliinnkk, error messages are automatically sup-
             pressed.

     --rr      Display raw information.  That is, for all the fields in the _s_t_a_t
             structure, display the raw, numerical value (for example, times
             in seconds since the epoch, etc.).

     --ss      Display information in ``shell output'', suitable for initializ-
             ing variables.

     --tt _t_i_m_e_f_m_t
             Display timestamps using the specified format.  This format is
             passed directly to strftime(3).

     --xx      Display information in a more verbose way as known from some
             Linux distributions.

   FFoorrmmaattss
     Format strings are similar to printf(3) formats in that they start with
     %%, are then followed by a sequence of formatting characters, and end in a
     character that selects the field of the _s_t_r_u_c_t _s_t_a_t which is to be for-
     matted.  If the %% is immediately followed by one of nn, tt, %%, or @@, then a
     newline character, a tab character, a percent character, or the current
     file number is printed, otherwise the string is examined for the follow-
     ing:

     Any of the following optional flags:

     ##       Selects an alternate output form for octal and hexadecimal out-
             put.  Non-zero octal output will have a leading zero, and non-
             zero hexadecimal output will have ``0x'' prepended to it.

     ++       Asserts that a sign indicating whether a number is positive or
             negative should always be printed.  Non-negative numbers are not
             usually printed with a sign.

     --       Aligns string output to the left of the field, instead of to the
             right.

     00       Sets the fill character for left padding to the `0' character,
             instead of a space.

     space   Reserves a space at the front of non-negative signed output
             fields.  A `++' overrides a space if both are used.

     Then the following fields:

     _s_i_z_e    An optional decimal digit string specifying the minimum field
             width.

     _p_r_e_c    An optional precision composed of a decimal point `..' and a deci-
             mal digit string that indicates the maximum string length, the
             number of digits to appear after the decimal point in floating
             point output, or the minimum number of digits to appear in
             numeric output.

     _f_m_t     An optional output format specifier which is one of DD, OO, UU, XX,
             FF, or SS.  These represent signed decimal output, octal output,
             unsigned decimal output, hexadecimal output, floating point out-
             put, and string output, respectively.  Some output formats do not
             apply to all fields.  Floating point output only applies to
             _t_i_m_e_s_p_e_c fields (the aa, mm, and cc fields).

             The special output specifier SS may be used to indicate that the
             output, if applicable, should be in string format.  May be used
             in combination with:

             aammcc     Display date in strftime(3) format.

             ddrr      Display actual device name.

             gguu      Display group or user name.

             pp       Display the mode of _f_i_l_e as in llss --llTTdd.

             NN       Displays the name of _f_i_l_e.

             TT       Displays the type of _f_i_l_e.

             YY       Insert a `` -> '' into the output.  Note that the default
                     output format for YY is a string, but if specified explic-
                     itly, these four characters are prepended.

     _s_u_b     An optional sub field specifier (high, middle, low).  Only
             applies to the pp, dd, rr, and TT output formats.  It can be one of
             the following:

             HH       ``High'' -- specifies the major number for devices from rr
                     or dd, the ``user'' bits for permissions from the string
                     form of pp, the file ``type'' bits from the numeric forms
                     of pp, and the long output form of TT.

             LL       ``Low'' -- specifies the minor number for devices from rr
                     or dd, the ``other'' bits for permissions from the string
                     form of pp, the ``user'', ``group'', and ``other'' bits
                     from the numeric forms of pp, and the llss --FF style output
                     character for file type when used with TT (the use of LL
                     for this is optional).

             MM       ``Middle'' -- specifies the ``group'' bits for permis-
                     sions from the string output form of pp, or the ``suid'',
                     ``sgid'', and ``sticky'' bits for the numeric forms of pp.

     _d_a_t_u_m   A required field specifier, being one of the following:

             dd       Device upon which _f_i_l_e resides.

             ii       _f_i_l_e's inode number.

             pp       File type and permissions.

             ll       Number of hard links to _f_i_l_e.

             uu, gg    User ID and group ID of _f_i_l_e's owner.

             rr       Device number for character and block device special
                     files.

             aa, mm, cc, BB
                     The time _f_i_l_e was last accessed or modified, of when the
                     inode was last changed, or the birth time of the inode.

             zz       The size of _f_i_l_e in bytes.

             bb       Number of blocks allocated for _f_i_l_e.

             kk       Optimal file system I/O operation block size.

             ff       User defined flags for _f_i_l_e.

             vv       Inode generation number.

             The following four field specifiers are not drawn directly from
             the data in _s_t_r_u_c_t _s_t_a_t, but are:

             NN       The name of the file.

             TT       The file type, either as in llss --FF or in a more descrip-
                     tive form if the _s_u_b field specifier HH is given.

             YY       The target of a symbolic link.

             ZZ       Expands to ``major,minor'' from the _r_d_e_v field for char-
                     acter or block special devices and gives size output for
                     all others.

     Only the %% and the field specifier are required.  Most field specifiers
     default to UU as an output form, with the exception of pp which defaults to
     OO, aa, mm, and cc which default to DD, and YY, TT, and NN which default to SS.

EEXXIITT SSTTAATTUUSS
     The ssttaatt and rreeaaddlliinnkk utilities exit 0 on success, and >0 if an error
     occurs.

EEXXAAMMPPLLEESS
     Given a symbolic link _f_o_o that points from _/_t_m_p_/_f_o_o to _/, you would use
     ssttaatt as follows:

           > stat -F /tmp/foo
           lrwxrwxrwx 1 jschauma cs 1 Apr 24 16:37:28 2002 /tmp/foo@ -> /

           > stat -LF /tmp/foo
           drwxr-xr-x 16 root wheel 512 Apr 19 10:57:54 2002 /tmp/foo/

     To initialize some shell variables, you could use the --ss flag as follows:

           > csh
           % eval set `stat -s .cshrc`
           % echo $st_size $st_mtimespec
           1148 1015432481

           > sh
           $ eval $(stat -s .profile)
           $ echo $st_size $st_mtimespec
           1148 1015432481

     In order to get a list of the kind of files including files pointed to if
     the file is a symbolic link, you could use the following format:

           $ stat -f "%N: %HT%SY" /tmp/*
           /tmp/bar: Symbolic Link -> /tmp/foo
           /tmp/output25568: Regular File
           /tmp/blah: Directory
           /tmp/foo: Symbolic Link -> /

     In order to get a list of the devices, their types and the major and
     minor device numbers, formatted with tabs and linebreaks, you could use
     the following format:

           stat -f "Name: %N%n%tType: %HT%n%tMajor: %Hr%n%tMinor: %Lr%n%n" /dev/*
           [...]
           Name: /dev/wt8
                   Type: Block Device
                   Major: 3
                   Minor: 8

           Name: /dev/zero
                   Type: Character Device
                   Major: 2
                   Minor: 12

     In order to determine the permissions set on a file separately, you could
     use the following format:

           > stat -f "%Sp -> owner=%SHp group=%SMp other=%SLp" .
           drwxr-xr-x -> owner=rwx group=r-x other=r-x

     In order to determine the three files that have been modified most
     recently, you could use the following format:

           > stat -f "%m%t%Sm %N" /tmp/* | sort -rn | head -3 | cut -f2-
           Apr 25 11:47:00 2002 /tmp/blah
           Apr 25 10:36:34 2002 /tmp/bar
           Apr 24 16:47:35 2002 /tmp/foo

SSEEEE AALLSSOO
     file(1), ls(1), lstat(2), readlink(2), stat(2), printf(3), strftime(3)

HHIISSTTOORRYY
     The ssttaatt utility appeared in NetBSD 1.6 and FreeBSD 4.10.

AAUUTTHHOORRSS
     The ssttaatt utility was written by Andrew Brown <atatat@NetBSD.org>.  This
     man page was written by Jan Schaumann <jschauma@NetBSD.org>.

BSD                               May 8, 2003                              BSD
