
CTIME(3)                 BSD Library Functions Manual                 CTIME(3)

NNAAMMEE
     aassccttiimmee, aassccttiimmee__rr, ccttiimmee, ccttiimmee__rr, ddiiffffttiimmee, ggmmttiimmee, ggmmttiimmee__rr,
     llooccaallttiimmee, llooccaallttiimmee__rr, mmkkttiimmee, ttiimmeeggmm -- transform binary date and time
     values

LLIIBBRRAARRYY
     Standard C Library (libc, -lc)

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ttiimmee..hh>>

     _e_x_t_e_r_n _c_h_a_r _*_t_z_n_a_m_e_[_2_];

     _c_h_a_r _*
     aassccttiimmee(_c_o_n_s_t _s_t_r_u_c_t _t_m _*_t_i_m_e_p_t_r);

     _c_h_a_r _*
     aassccttiimmee__rr(_c_o_n_s_t _s_t_r_u_c_t _t_m _*_r_e_s_t_r_i_c_t _t_i_m_e_p_t_r, _c_h_a_r _*_r_e_s_t_r_i_c_t _b_u_f);

     _c_h_a_r _*
     ccttiimmee(_c_o_n_s_t _t_i_m_e___t _*_c_l_o_c_k);

     _c_h_a_r _*
     ccttiimmee__rr(_c_o_n_s_t _t_i_m_e___t _*_c_l_o_c_k, _c_h_a_r _*_b_u_f);

     _d_o_u_b_l_e
     ddiiffffttiimmee(_t_i_m_e___t _t_i_m_e_1, _t_i_m_e___t _t_i_m_e_0);

     _s_t_r_u_c_t _t_m _*
     ggmmttiimmee(_c_o_n_s_t _t_i_m_e___t _*_c_l_o_c_k);

     _s_t_r_u_c_t _t_m _*
     ggmmttiimmee__rr(_c_o_n_s_t _t_i_m_e___t _*_c_l_o_c_k, _s_t_r_u_c_t _t_m _*_r_e_s_u_l_t);

     _s_t_r_u_c_t _t_m _*
     llooccaallttiimmee(_c_o_n_s_t _t_i_m_e___t _*_c_l_o_c_k);

     _s_t_r_u_c_t _t_m _*
     llooccaallttiimmee__rr(_c_o_n_s_t _t_i_m_e___t _*_c_l_o_c_k, _s_t_r_u_c_t _t_m _*_r_e_s_u_l_t);

     _t_i_m_e___t
     mmkkttiimmee(_s_t_r_u_c_t _t_m _*_t_i_m_e_p_t_r);

     _t_i_m_e___t
     ttiimmeeggmm(_s_t_r_u_c_t _t_m _*_t_i_m_e_p_t_r);

DDEESSCCRRIIPPTTIIOONN
     The functions ccttiimmee(), ggmmttiimmee(), and llooccaallttiimmee() all take as an argument
     a time value representing the time in seconds since the Epoch (00:00:00
     UTC, January 1, 1970; see time(3)).  When encountering an error, these
     functions return NULL and set errno to an appropriate value.

     The function llooccaallttiimmee() converts the time value pointed at by _c_l_o_c_k.  It
     returns a pointer to a ``_s_t_r_u_c_t _t_m'' (described below), which contains
     the broken-out time information for the value after adjusting for the
     current time zone (and any other factors such as Daylight Saving Time).
     Time zone adjustments are performed as specified by the TZ environment
     variable (see tzset(3)).  The function llooccaallttiimmee() uses tzset(3) to ini-
     tialize time conversion information, if tzset(3) has not already been
     called by the process.

     After filling in the tm structure, llooccaallttiimmee() sets the _t_m___i_s_d_s_t'th ele-
     ment of _t_z_n_a_m_e to a pointer to an ASCII string containing the time zone
     abbreviation to be used with llooccaallttiimmee()'s return value.

     The function ggmmttiimmee() also converts the time value, but makes no time
     zone adjustment.  It returns a pointer to a tm structure (described
     below).

     The ccttiimmee() function adjusts the time value for the current time zone, in
     the same manner as llooccaallttiimmee().  It returns a pointer to a 26-character
     string of the form:

           Thu Nov 24 18:22:48 1986\n\0

     All of the fields have constant width.

     The ccttiimmee__rr() function provides the same functionality as ccttiimmee(), except
     that the caller must provide the output buffer _b_u_f (which must be at
     least 26 characters long) to store the result.  The llooccaallttiimmee__rr() and
     ggmmttiimmee__rr() functions provide the same functionality as llooccaallttiimmee() and
     ggmmttiimmee(), respectively, except the caller must provide the output buffer
     _r_e_s_u_l_t.

     The aassccttiimmee() function converts the broken-out time in the structure _t_m
     (pointed at by _*_t_i_m_e_p_t_r) to the form shown in the example above.

     The aassccttiimmee__rr() function provides the same functionality as aassccttiimmee(),
     except that the caller provides the output buffer _b_u_f (which must be at
     least 26 characters long) to store the result.

     The functions mmkkttiimmee() and ttiimmeeggmm() convert the broken-out time (in the
     structure pointed to by _*_t_i_m_e_p_t_r) into a time value with the same encod-
     ing as that of the values returned by the time(3) function (that is, sec-
     onds from the Epoch, UTC).  The mmkkttiimmee() function interprets the input
     structure according to the current timezone setting (see tzset(3)).  The
     ttiimmeeggmm() function interprets the input structure as representing Univer-
     sal Coordinated Time (UTC).

     The original values of the _t_m___w_d_a_y and _t_m___y_d_a_y components of the struc-
     ture are ignored. The original values of the other components are not
     restricted to their normal ranges and will be normalized, if need be.
     For example, October 40 is changed into November 9, a _t_m___h_o_u_r of -1 means
     1 hour before midnight, _t_m___m_d_a_y of 0 means the day preceding the current
     month, and _t_m___m_o_n of -2 means 2 months before January of _t_m___y_e_a_r.  (A
     positive or zero value for _t_m___i_s_d_s_t causes mmkkttiimmee() to presume initially
     that summer time (for example, Daylight Saving Time) is or is not
     (respectively) in effect for the specified time.  A negative value for
     _t_m___i_s_d_s_t causes the mmkkttiimmee() function to attempt to divine whether summer
     time is in effect for the specified time.  The _t_m___i_s_d_s_t and _t_m___g_m_t_o_f_f
     members are forced to zero by ttiimmeeggmm().)

     On successful completion, the values of the _t_m___w_d_a_y and _t_m___y_d_a_y compo-
     nents of the structure are set appropriately, and the other components
     are set to represent the specified calendar time, but with their values
     forced to their normal ranges; the final value of _t_m___m_d_a_y is not set
     until _t_m___m_o_n and _t_m___y_e_a_r are determined.  The mmkkttiimmee() function returns
     the specified calendar time; if the calendar time cannot be represented,
     it returns -1;

     The ddiiffffttiimmee() function returns the difference between two calendar
     times, (_t_i_m_e_1 - _t_i_m_e_0), expressed in seconds.

     External declarations, as well as the tm structure definition, are con-
     tained in the <_t_i_m_e_._h> include file.  The tm structure includes at least
     the following fields:

           int tm_sec;     /* seconds (0 - 60) */
           int tm_min;     /* minutes (0 - 59) */
           int tm_hour;    /* hours (0 - 23) */
           int tm_mday;    /* day of month (1 - 31) */
           int tm_mon;     /* month of year (0 - 11) */
           int tm_year;    /* year - 1900 */
           int tm_wday;    /* day of week (Sunday = 0) */
           int tm_yday;    /* day of year (0 - 365) */
           int tm_isdst;   /* is summer time in effect? */
           char *tm_zone;  /* abbreviation of timezone name */
           long tm_gmtoff; /* offset from UTC in seconds */

     The field _t_m___i_s_d_s_t is non-zero if summer (i.e., Daylight Saving) time is
     in effect.

     The field _t_m___g_m_t_o_f_f is the offset (in seconds) of the time represented
     from UTC, with positive values indicating locations east of the Prime
     Meridian.

SSEEEE AALLSSOO
     date(1), gettimeofday(2), getenv(3), time(3), tzset(3), tzfile(5)

SSTTAANNDDAARRDDSS
     The aassccttiimmee(), ccttiimmee(), ddiiffffttiimmee(), ggmmttiimmee(), llooccaallttiimmee(), and mmkkttiimmee()
     functions conform to ISO/IEC 9899:1990 (``ISO C90''), and conform to
     ISO/IEC 9945-1:1996 (``POSIX.1'') provided the selected local timezone
     does not contain a leap-second table (see zic(8)).

     The aassccttiimmee__rr(), ccttiimmee__rr(), ggmmttiimmee__rr(), and llooccaallttiimmee__rr() functions are
     expected to conform to ISO/IEC 9945-1:1996 (``POSIX.1'') (again provided
     the selected local timezone does not contain a leap-second table).

     The ttiimmeeggmm() function is not specified by any standard; its function can-
     not be completely emulated using the standard functions described above.

HHIISSTTOORRYY
     This manual page is derived from the time package contributed to Berkeley
     by Arthur Olson and which appeared in 4.3BSD.

BBUUGGSS
     Except for ddiiffffttiimmee(), mmkkttiimmee(), and the __rr() variants of the other func-
     tions, these functions leaves their result in an internal static object
     and return a pointer to that object.  Subsequent calls to these function
     will modify the same object.

     The C Standard provides no mechanism for a program to modify its current
     local timezone setting, and the POSIX-standard method is not reentrant.
     (However, thread-safe implementations are provided in the POSIX threaded
     environment.)

     The _t_m___z_o_n_e field of a returned _t_m structure points to a static array of
     characters, which will also be overwritten by any subsequent calls (as
     well as by subsequent calls to tzset(3) and tzsetwall(3)).

     Use of the external variable _t_z_n_a_m_e is discouraged; the _t_m___z_o_n_e entry in
     the tm structure is preferred.

BSD                             January 2, 1999                            BSD
