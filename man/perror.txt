
STRERROR(3)              BSD Library Functions Manual              STRERROR(3)

NNAAMMEE
     ppeerrrroorr, ssttrreerrrroorr, ssttrreerrrroorr__rr, ssyyss__eerrrrlliisstt, ssyyss__nneerrrr -- system error mes-
     sages

LLIIBBRRAARRYY
     Standard C Library (libc, -lc)

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ssttddiioo..hh>>

     _v_o_i_d
     ppeerrrroorr(_c_o_n_s_t _c_h_a_r _*_s);

     _e_x_t_e_r_n _c_o_n_s_t _c_h_a_r _* _c_o_n_s_t _s_y_s___e_r_r_l_i_s_t_[_];
     _e_x_t_e_r_n _c_o_n_s_t _i_n_t _s_y_s___n_e_r_r;

     ##iinncclluuddee <<ssttrriinngg..hh>>

     _c_h_a_r _*
     ssttrreerrrroorr(_i_n_t _e_r_r_n_u_m);

     _i_n_t
     ssttrreerrrroorr__rr(_i_n_t _e_r_r_n_u_m, _c_h_a_r _*_s_t_r_e_r_r_b_u_f, _s_i_z_e___t _b_u_f_l_e_n);

DDEESSCCRRIIPPTTIIOONN
     The ssttrreerrrroorr(), ssttrreerrrroorr__rr(), and ppeerrrroorr() functions look up the error
     message string corresponding to an error number.

     The ssttrreerrrroorr() function accepts an error number argument _e_r_r_n_u_m and
     returns a pointer to the corresponding message string.

     The ssttrreerrrroorr__rr() function renders the same result into _s_t_r_e_r_r_b_u_f for a
     maximum of _b_u_f_l_e_n characters and returns 0 upon success.

     The ppeerrrroorr() function finds the error message corresponding to the cur-
     rent value of the global variable _e_r_r_n_o (intro(2)) and writes it, fol-
     lowed by a newline, to the standard error file descriptor.  If the argu-
     ment _s is non-NULL and does not point to the null character, this string
     is prepended to the message string and separated from it by a colon and
     space (``: ''); otherwise, only the error message string is printed.

     If the error number is not recognized, these functions return an error
     message string containing ``Unknown error: '' followed by the error num-
     ber in decimal.  The ssttrreerrrroorr() and ssttrreerrrroorr__rr() functions return EINVAL
     as a warning.  Error numbers recognized by this implementation fall in
     the range 0 <= _e_r_r_n_u_m < _s_y_s___n_e_r_r.

     If insufficient storage is provided in _s_t_r_e_r_r_b_u_f (as specified in _b_u_f_l_e_n)
     to contain the error string, ssttrreerrrroorr__rr() returns ERANGE and _s_t_r_e_r_r_b_u_f
     will contain an error message that has been truncated and NUL terminated
     to fit the length specified by _b_u_f_l_e_n.

     The message strings can be accessed directly using the external array
     _s_y_s___e_r_r_l_i_s_t.  The external value _s_y_s___n_e_r_r contains a count of the mes-
     sages in _s_y_s___e_r_r_l_i_s_t.  The use of these variables is deprecated;
     ssttrreerrrroorr() or ssttrreerrrroorr__rr() should be used instead.

SSEEEE AALLSSOO
     intro(2), psignal(3)

SSTTAANNDDAARRDDSS
     The ppeerrrroorr() and ssttrreerrrroorr() functions conform to ISO/IEC 9899:1999
     (``ISO C99'').  The ssttrreerrrroorr__rr() function conforms to IEEE Std
     1003.1-2001 (``POSIX.1'').

HHIISSTTOORRYY
     The ssttrreerrrroorr() and ppeerrrroorr() functions first appeared in 4.4BSD.  The
     ssttrreerrrroorr__rr() function was implemented in FreeBSD 4.4 by Wes Peters
     <wes@FreeBSD.org>.

BBUUGGSS
     For unknown error numbers, the ssttrreerrrroorr() function will return its result
     in a static buffer which may be overwritten by subsequent calls.

     The return type for ssttrreerrrroorr() is missing a type-qualifier; it should
     actually be _c_o_n_s_t _c_h_a_r _*.

     Programs that use the deprecated _s_y_s___e_r_r_l_i_s_t variable often fail to com-
     pile because they declare it inconsistently.

BSD                            October 12, 2004                            BSD
