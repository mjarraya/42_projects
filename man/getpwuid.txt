
GETPWENT(3)              BSD Library Functions Manual              GETPWENT(3)

NNAAMMEE
     ggeettppwweenntt, ggeettppwwnnaamm, ggeettppwwnnaamm__rr, ggeettppwwuuiidd, ggeettppwwuuiidd__rr, ggeettppwwuuuuiidd,
     ggeettppwwuuuuiidd__rr, sseettppaasssseenntt, sseettppwweenntt, eennddppwweenntt -- password database opera-
     tions

LLIIBBRRAARRYY
     Standard C Library (libc, -lc)

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ssyyss//ttyyppeess..hh>>
     ##iinncclluuddee <<ppwwdd..hh>>
     ##iinncclluuddee <<uuuuiidd//uuuuiidd..hh>>

     _s_t_r_u_c_t _p_a_s_s_w_d _*
     ggeettppwweenntt(_v_o_i_d);

     _s_t_r_u_c_t _p_a_s_s_w_d _*
     ggeettppwwnnaamm(_c_o_n_s_t _c_h_a_r _*_l_o_g_i_n);

     _i_n_t
     ggeettppwwnnaamm__rr(_c_o_n_s_t _c_h_a_r _*_n_a_m_e, _s_t_r_u_c_t _p_a_s_s_w_d _*_p_w_d, _c_h_a_r _*_b_u_f_f_e_r,
         _s_i_z_e___t _b_u_f_s_i_z_e, _s_t_r_u_c_t _p_a_s_s_w_d _*_*_r_e_s_u_l_t);

     _s_t_r_u_c_t _p_a_s_s_w_d _*
     ggeettppwwuuiidd(_u_i_d___t _u_i_d);

     _i_n_t
     ggeettppwwuuiidd__rr(_u_i_d___t _u_i_d, _s_t_r_u_c_t _p_a_s_s_w_d _*_p_w_d, _c_h_a_r _*_b_u_f_f_e_r, _s_i_z_e___t _b_u_f_s_i_z_e,
         _s_t_r_u_c_t _p_a_s_s_w_d _*_*_r_e_s_u_l_t);

     _s_t_r_u_c_t _p_a_s_s_w_d _*
     ggeettppwwuuuuiidd(_u_u_i_d___t _u_u_i_d);

     _i_n_t
     ggeettppwwuuuuiidd__rr(_u_u_i_d___t _u_u_i_d, _s_t_r_u_c_t _p_a_s_s_w_d _*_p_w_d, _c_h_a_r _*_b_u_f_f_e_r,
         _s_i_z_e___t _b_u_f_s_i_z_e, _s_t_r_u_c_t _p_a_s_s_w_d _*_*_r_e_s_u_l_t);

     _i_n_t
     sseettppaasssseenntt(_i_n_t _s_t_a_y_o_p_e_n);

     _v_o_i_d
     sseettppwweenntt(_v_o_i_d);

     _v_o_i_d
     eennddppwweenntt(_v_o_i_d);

DDEESSCCRRIIPPTTIIOONN
     These functions obtain information from opendirectoryd(8), including
     records in _/_e_t_c_/_m_a_s_t_e_r_._p_a_s_s_w_d which is described in master.passwd(5).
     Each entry in the database is defined by the structure _p_a_s_s_w_d found in
     the include file <_p_w_d_._h>:

           struct passwd {
                   char    *pw_name;       /* user name */
                   char    *pw_passwd;     /* encrypted password */
                   uid_t   pw_uid;         /* user uid */
                   gid_t   pw_gid;         /* user gid */
                   time_t  pw_change;      /* password change time */
                   char    *pw_class;      /* user access class */
                   char    *pw_gecos;      /* Honeywell login info */
                   char    *pw_dir;        /* home directory */
                   char    *pw_shell;      /* default shell */
                   time_t  pw_expire;      /* account expiration */
                   int     pw_fields;      /* internal: fields filled in */
           };

     The functions ggeettppwwnnaamm(), ggeettppwwuuiidd(), and ggeettppwwuuuuiidd() search the password
     database for the given login name, user uid, or user uuid respectively,
     always returning the first one encountered.

     Note that the password file _/_e_t_c_/_m_a_s_t_e_r_._p_a_s_s_w_d does not contain user
     UUIDs.  The UUID for a user may be found using mmbbrr__uuiidd__ttoo__uuuuiidd().

     On OS X, these routines are thread-safe and return a pointer to a thread-
     specific data structure.  The contents of this data structure are auto-
     matically released by subsequent calls to any of these routines on the
     same thread, or when the thread exits.  These routines are therefore
     unsuitable for use in libraries or frameworks, from where they may over-
     write the per-thread data that the calling application expects to find as
     a result of its own calls to these routines. Library and framework code
     should use the alternative reentrant variants detailed below.

     The ggeettppwweenntt() function searches all available directory services on it's
     first invocation.  It caches the returned entries in a list and returns
     user account entries one at a time.

     _N_O_T_E that ggeettppwweenntt() may cause a very lengthy search for user account
     records by ooppeennddiirreeccttoorryydd and may result in a large number of user
     account records being cached by the calling process.  Use of this func-
     tion is not advised.

     The functions ggeettppwwnnaamm__rr(), ggeettppwwuuiidd__rr(), and ggeettppwwuuuuiidd__rr() are alterna-
     tive versions of ggeettppwwnnaamm(), ggeettppwwuuiidd(), and ggeettppwwuuuuiidd() respectively.
     They store the results of their search in the caller-provided _p_w_d struc-
     ture, which additionally contains pointers to strings that are stored in
     the caller-provided _b_u_f_f_e_r of size _b_u_f_s_i_z_e.  (The maximum required
     _b_u_f_s_i_z_e can be obtained by passing the _SC_GETPW_R_SIZE_MAX constant to
     the sysconf(3) call. See example code below.) When these functions are
     successful, the _p_w_d argument will be filled in, and a pointer to that
     argument will be stored in the caller-provided _r_e_s_u_l_t.  If an entry is
     not found or an error occurs, _r_e_s_u_l_t will be set to NULL.

     The sseettppaasssseenntt() function causes ggeettppwweenntt() to ``rewind'' to the begin-
     ning of the list of entries cached by a previous ggeettppwweenntt() call.  The
     cache is not cleared.  The _s_t_a_y_o_p_e_n parameter value is unused on OS X.

     The sseettppwweenntt() and eennddppwweenntt() functions clear the cached results from a
     previous ggeettppwweenntt() call.

     These routines have been written to `shadow' the password of user records
     created on Mac OS X 10.3 or later, by returning a structure whose pass-
     word field points to the string `********'.  Legacy crypt passwords are
     still returned for user records created on earlier versions of Mac OS X
     whose opendirectoryd(8) attribute contains the value `;basic;'.

     Note that opendirectoryd(8) allows user records from some sources which
     may not include all the component fields present in a passwd structure.
     Only the name, uid, and gid of a user record are required.  Default val-
     ues will be supplied as follows:

           pw_passwd = "*"
           pw_change = 0
           pw_class = ""
           pw_gecos = ""
           pw_dir = "/var/empty"
           pw_shell = "/usr/bin/false"
           pw_expire = 0

RREETTUURRNN VVAALLUUEESS
     The functions ggeettppwweenntt(), ggeettppwwnnaamm(), ggeettppwwuuiidd(), and ggeettppwwuuuuiidd() return
     a valid pointer to a passwd structure on success or NULL if the entry is
     not found or if an error occurs.  If an error does occur, _e_r_r_n_o will be
     set.  Note that programs must explicitly set _e_r_r_n_o to zero before calling
     any of these functions if they need to distinguish between a non-existent
     entry and an error.  The functions ggeettppwwnnaamm__rr(), ggeettppwwuuiidd__rr(), and
     ggeettppwwuuuuiidd__rr() return 0 if no error occurred, or an error number to indi-
     cate failure.  It is not an error if a matching entry is not found.
     (Thus, if _r_e_s_u_l_t is NULL and the return value is 0, no matching entry
     exists.)

     The sseettppaasssseenntt() function returns 0 on failure and 1 on success.  The
     eennddppwweenntt() and sseettppwweenntt() functions have no return value.

EEXXAAMMPPLLEESS
     To print the current user's home directory without depending on per-
     thread storage:

           #include <sys/types.h>
           #include <unistd.h>
           #include <stdlib.h>
           #include <stdio.h>
           #include <pwd.h>

           int bufsize;

           if ((bufsize = sysconf(_SC_GETPW_R_SIZE_MAX)) == -1)
               abort();

           char buffer[bufsize];
           struct passwd pwd, *result = NULL;
           if (getpwuid_r(getuid(), &pwd, buffer, bufsize, &result) != 0 || !result)
               abort();

           printf("%s\n", pwd.pw_dir);

FFIILLEESS
     The secure password database file
     /etc/master.passwd  The current password file
     /etc/passwd         A Version 7 format password file

EERRRROORRSS
     These routines may fail for any of the errors specified in open(2),
     dbopen(3), socket(2), and connect(2), in addition to the following:

     [ERANGE]           The buffer specified by the _b_u_f_f_e_r and _b_u_f_s_i_z_e argu-
                        ments was insufficiently sized to store the result.
                        The caller should retry with a larger buffer.

SSEEEE AALLSSOO
     getlogin(2), getgrent(3), passwd(5), mbr_uid_to_uuid(3,)
     opendirectoryd(8), yp(8)

SSTTAANNDDAARRDDSS
     The ggeettppwweenntt(), ggeettppwwnnaamm(), ggeettppwwnnaamm__rr(), ggeettppwwuuiidd(), ggeettppwwuuiidd__rr(),
     sseettppwweenntt(), and eennddppwweenntt() functions conform to ISO/IEC 9945-1:1996
     (``POSIX.1'').

HHIISSTTOORRYY
     The ggeettppwweenntt(), ggeettppwwnnaamm(), ggeettppwwuuiidd(), sseettppwweenntt(), and eennddppwweenntt() func-
     tions appeared in Version 7 AT&T UNIX.  The sseettppaasssseenntt() function
     appeared in 4.3BSD-Reno.  The ggeettppwwnnaamm__rr() and ggeettppwwuuiidd__rr() functions
     appeared in FreeBSD 5.1.  The functions ggeettppwwuuuuiidd() and ggeettppwwuuuuiidd__rr()
     appeared in Mac OS X 10.8.

BBUUGGSS
     The functions ggeettppwweenntt(), ggeettppwwnnaamm(), ggeettppwwuuiidd(), and ggeettppwwuuuuiidd(), leave
     their results in an internal thread-specific memory and return a pointer
     to that object.  Subsequent calls to the same function will modify the
     same object.

BSD                            October 26, 2011                            BSD
